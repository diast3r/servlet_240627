형상관리도구 - 거의 모든 회사에선 Git 사용

git을 사용하는 방법은 사람맏, 팀마다 다르기 때문에 배운 내용과 나중에 실제 사용할 때와 다를 수 있음.
GitHub: Git을 인터넷에 올려 관리하는 저장소

Git

새 폴더(gittest) 만들고 폴더의 보기 설정 - 확장자명과 숨긴 항목 표시
test1.txt, test2.txt 생성 (안에 아무 내용) 아직 git을 통한 버전관리가 안 되고 있음.

*************************
Sourcetree 프로그램 설치. 마론달 강의자료에 링크 참조
	설치파일 실행- 처음엔 건너뛰기
	고급옵션 - 권장 항목 체크 - 다음 (오류 생기면 취소하고 다시)
	preferences: 집에서 설치할 때는 내가 원하는 이름과 이메일 쓰기. 학원에선 text, test@test.com으로
	다음 누르면 키를 불러오시겠습니까? -> 아니오
	설치 완료되면 create - 디렉토리 탐색해서gittest 폴더 선택
	문제가 발생했습니다 -> 예 클릭

*********
로컬 컴퓨터에서 수정한 버전을 바로 서비스하지 않고 중간 단계를 거쳐감(검토). 회사별로 단계가 더 있기도, 덜 있기도 함.
local -> dev계(DB: dev용) -> stage계(DB: real계 사용.실제 사용자들이 쓰는 DB로 테스트) -> real계(배포)

*********************
스테이지에 test1,txt, test2.txt 두 개 올리기
아래 입력부분에 간단한 메모처럼 설명 작성하기
커밋 버튼을 누르면 git에 등록됨.

이제 gittest 폴더 가보면 .git이라는 숨겨진 폴더 생성됨.(이게 버전을 관리해줌.)

test1.txt 파일 변경해보기
-> 소스트리에 커밋하지 않은 변경사항 항목 생김.
-> 왼쪽 탭에서 파일 상태 눌러서 스테이지에 올라가지 않은 파일을 확인하고 스테이지에 올려서 커밋하면 변경사항 등록됨.
-> history 탭에서 master(또는main) 붙어있는 버전이 최신버전.


********************
git에 등록하지 않고 싶은 파일(.gitignore 파일에 등록)
gittest폴더 안에 test3.txt 파일 생성
.gitignore 파일도 생성(오타 주의) 이 안에 명시된 파일들은 git이 관리하지 않는다. 텍스트 파일로 생성하고 확장자명 지워서 생성하기
파일 안에 test3.txt(줄바꿈)test2.txt 작성하고 저장
이제 test2.txt, test3.txt 파일 내용 수정해서 테스트해보기
=> 알 수 있는 사실: test3.txt는 무시했지만, test2.txt는 변경사항을 git이 관리함. 처음 생성할 때부터 .gitignore에 등록해야 추후 수정해도 git이 무시함.


********************
branch
각 버전별 코드덩어리들을 branch라고 함.
예) ver2.2 branch -> ver3.0 branch 다음 버전을 개발할 때, 이전 버전에서 코드를 그대로 가져오고 수정, 추가등 작업을 한다(2.2에서 복붙, 내용 추가)
3.0버전이 안정적으로 개발되면 다음 개발버전(4.0)은 3.0내용 그대로에서 추가, 수정하는 식으로 가지치기를 함.(branch이름 뜻)
구글에서 소스트리 그래프 검색.


새 브랜치 생성
소스트리 - 위쪽 탭에서 브랜치클릭
devlop이라는 이름으로 생성
master(최신버전)branch를 그대로 가져와서 수정할 develop 브랜치 생성
master: 개발 완료된, 배포 가능한 상태의 브랜치
개발은 master 브랜치를 복사해온 develop 브랜치에서 진행하게 된다
브랜치 탭 - devlop 글씨 굵게 표시된 상태에서 test1, test2 수정해서 커밋하기
master 브랜치 확인하기 -> master 브랜치 더블클릭해서  굵은 글씨 상태로 만들고 test1, test2 내용 확인하면 옛날 버전 그대로임.

★★★★★★★★★★★★★★★
브랜치 간의 이동을 할 때는 모든 파일이 커밋된 후에 이동할 것.(주의하기)

master(main) 와 develop 브랜치의 관계
master 브랜치는 커밋을 하지 않고, develop브랜치에 계속 커밋을 함.
develop 브랜치를 다 개발하고 안정화가 된 것같으면 master 브랜치에 병합함.(merge)

master에 develop 내용 병합하기
master 브랜치선택하고 작업.
병합 버튼 누르고 develop 브랜치 선택하고 확인 클릭

*******************
이제까지 한 것들 원격 서버에 등록하기(GitHub)
github - my profile - repositories
new눌러서 생성
repository name은 gittest로
앞으로 내 repository를 볼 땐는 github.com/diast3r/gittest
소스트리에서 github에 등록을 할 건데, 보안적인 이유로 비대칭키 알고리즘 방식을 사용함.

*************************
비대칭키 알고리즘(SSH) 방식
public key(공개키) 인터넷에 배포하는 키
private key(개인키) 이건 혼자만 알 키. 소스트리에 등록할 키(잘 관리)
이 두 개는 한 쌍으로 작동.
소스트리 -> 도구 -> SSH Key 생성 또는 불러오기
보안 방식: ECDSA 선택
generate 누르고 
save private key 눌러서 github_240909(생성 날짜)라는 이름으로 저장.
공개키 불러오기: SSH Key 생성 또는 불러오기 -> load -> 개인키 파일 선택.
***********************
개인키를 소스트리에 연결하기
도구 -> 옵션 -> 일반 -> ssh 클라이언트 설정 -> (...) 눌러서 개인키 파일선택


******************
github에 공개키 등록
프로필 사진 클릭 -> settings -> SSH and GPG keys -> New SSH key
title은 학원 301호_240909  이런 식.
추가하기

*****************************
소스트리에서 github로 전송할 경로 추가
github -> your profile -> repository -> quick setup에 있는 주소(ssh 방식 선택)복사해서 소스트리에 추가할 것
소스트리에서 원격 버튼 -> 설정 클릭 -> 추가
원격 이름:origin(관례상)
url/경로:복사한 경로 추가.

***************************
소스트리에서 Push하기
Push -> develop, master 선택해서 push하기.
pushing이 안끝나는데, 출력 전부 보기 눌러서 보기 -> y를 입력해야한다고 함.
=> 마론달 강의자료에서 "y를 눌러야 한다는 에러..." 참고
명령 프롬프트에서 plink.exe 있는 경로까지 들어가고 plink.exe github.com 엔터 -> y 엔터
login -> 이건 할 필요 없고 cmd 창 닫으면 됨.
다시 push 해보면 오류 없이 완료된다

************************
소스트리에 서블릿 등록해보기
이클립스 workspace 폴더 들어가기(절대!!!! .medata 폴더가 있는 위치는 등록하지 않기.)
4_servlet/workspace/Test(프로젝트명)
소스트리에서 새 탭 띄우기 -> create -> 위 경로 선택
디렉터리에서 문제가 발생했습니다 -> 예 선택
스테이지에 올라가지 않은 파일 목록을 보면 .class 파일도 있고, .java 파일도 있다.
java 파일을 컴파일하면 빌드의 결과물인 class 파일 생기는 것
github에는 java파일만 올리면 되므로, .gitignore(무시할 파일)에 class 파일들 등록할 것임
마론달 강의자료 4-4 참고. 링크(ignore 설정 참고) 들어가서 복사하고, .gitignore 파일생성하고 내용 붙여넣기
저장하고 나면 소스트리 - 스테이지에 올라가지 않은 파일에서 class 파일이 안 보여야 함.
이제 모두 스테이지에 올리고 "초기환경 설정"이라고 설명 적고 커밋
master 브랜치는 생성됐으니, 이제 develop 브랜치도 생성
앞으로 커밋은 develop 브랜치에서만 할 것.

********************
github에 서블릿 push하기
github - repositories에서 new로 새로 만들기 => 이름: servlet_240627
소스트리에서 원격 - 추가(원격이름: origin, 주소: github에서 복사해온 ssh주소)
push -> 브랜치 두 개 선택하고 push

*********************
다른 컴퓨터에서 깃허브의 코드 다운받기(clone)
개인키를 다운받을 컴퓨터로 복사하기(메일 등)
또는, 새로 개인키를 만들어서 github와 연결
내려받을 프로젝트를 위해 폴더를 새로 만들어서
새로 이클립스 압축 풀고, workspace 폴더도 생성
이클립스 실행해서 톰캣 설정 등 완료 후
같은 경로내에 clone이라는 폴더도 생성. (eclipse, workspace, clone 폴더가 같은 위치)
깃허브에서 복사할 repository 들어가기 -> code 버튼 -> 주소 복사(ssh)
소스트리에서 새 탭 생성 -> clone -> 주소 붙여넣기 -> 키 인증
clone할 폴더 선택 후 clone

************************
clone한 프로젝트 이클립스로 불러오기
import projects -> General -> Existing Projects into Workspace
directory는 clone폴더 선택 -> finish
서버 런타임 환경설정에서 톰캣 서버 연결 안 하면 오류 뜸.


선생님 깃허브(마론달 정답 등)
https://github.com/marobiana